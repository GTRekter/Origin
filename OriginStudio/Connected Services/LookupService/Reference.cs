//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.26720.2
// 
namespace OriginStudio.LookupService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OR_Lookup", Namespace="http://schemas.datacontract.org/2004/07/OriginStudio.Service")]
    public partial class OR_Lookup : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string NameField;
        
        private string OriginIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginId {
            get {
                return this.OriginIdField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginIdField, value) != true)) {
                    this.OriginIdField = value;
                    this.RaisePropertyChanged("OriginId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OR_LookupValue", Namespace="http://schemas.datacontract.org/2004/07/OriginStudio.Service")]
    public partial class OR_LookupValue : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string OriginIdField;
        
        private string RelatedOriginIdField;
        
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginId {
            get {
                return this.OriginIdField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginIdField, value) != true)) {
                    this.OriginIdField = value;
                    this.RaisePropertyChanged("OriginId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RelatedOriginId {
            get {
                return this.RelatedOriginIdField;
            }
            set {
                if ((object.ReferenceEquals(this.RelatedOriginIdField, value) != true)) {
                    this.RelatedOriginIdField = value;
                    this.RaisePropertyChanged("RelatedOriginId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LookupService.ILookupService")]
    public interface ILookupService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILookupService/GetLookups", ReplyAction="http://tempuri.org/ILookupService/GetLookupsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<OriginStudio.LookupService.OR_Lookup>> GetLookupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILookupService/GetLookup", ReplyAction="http://tempuri.org/ILookupService/GetLookupResponse")]
        System.Threading.Tasks.Task<OriginStudio.LookupService.OR_Lookup> GetLookupAsync(string lookupOriginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILookupService/GetValuesByLookup", ReplyAction="http://tempuri.org/ILookupService/GetValuesByLookupResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<OriginStudio.LookupService.OR_LookupValue>> GetValuesByLookupAsync(string lookupOriginId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILookupServiceChannel : OriginStudio.LookupService.ILookupService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LookupServiceClient : System.ServiceModel.ClientBase<OriginStudio.LookupService.ILookupService>, OriginStudio.LookupService.ILookupService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public LookupServiceClient() : 
                base(LookupServiceClient.GetDefaultBinding(), LookupServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ILookupService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LookupServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(LookupServiceClient.GetBindingForEndpoint(endpointConfiguration), LookupServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LookupServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(LookupServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LookupServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(LookupServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LookupServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<OriginStudio.LookupService.OR_Lookup>> GetLookupsAsync() {
            return base.Channel.GetLookupsAsync();
        }
        
        public System.Threading.Tasks.Task<OriginStudio.LookupService.OR_Lookup> GetLookupAsync(string lookupOriginId) {
            return base.Channel.GetLookupAsync(lookupOriginId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<OriginStudio.LookupService.OR_LookupValue>> GetValuesByLookupAsync(string lookupOriginId) {
            return base.Channel.GetValuesByLookupAsync(lookupOriginId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ILookupService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ILookupService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:54445/LookupService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return LookupServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ILookupService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return LookupServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ILookupService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ILookupService,
        }
    }
}
